<?php
// $Id$

  /* @file
   * A simple module that adds a user to groups based on attending a class.
   */

  /**
   * Implementation of hook_help()
   */
function civicrm_event_autogroup_help($section, $args = array() ) 
{ 
    switch ($section) { 
    case 'admin/modules#description': 
        return t('Adds contacts to a matching CiviCRM group after an Event has ended.');
    default :
        return;
    } 
} 


function civicrm_event_autogroup_user_login( &$edit, $account ) {
    if ( ! civicrm_initialize( ) ) {
        return;
    } 
   
    // do nothing for now
}




/**
 * Implementation of hook_menu().
 */
function civicrm_event_autogroup_menu( ) 
{
    $items = array();
    $items['admin/config/civicrm/civicrm_event_autogroup'] = 
        array(
              'title' => t('CiviEvent Autogroup'),
              'description' => t('Add/remove association rules and configure settings. Also perform manual synchronization.'),
              'page callback' => 'drupal_get_form',
              'page arguments' => array('civicrm_event_autogroup_admin_settings'),
              'access arguments' => array('administer CiviCRM'),
              'type' => MENU_NORMAL_ITEM,
              );  
    $items['admin/config/civicrm/civicrm_event_autogroup/settings'] = 
        array(
              'title' => t('CiviEvent Autogroup'),
              'description' => t('Add/remove association rules and configure settings. Also perform manual synchronization.'),
              'page callback' => 'drupal_get_form',
              'page arguments' => array('civicrm_event_autogroup_admin_settings'),
              'access arguments' => array('access CiviCRM Event Autogroup'),
              'weight' => -10,
              'type' => MENU_DEFAULT_LOCAL_TASK,
              );      
    $items['admin/config/civicrm/civicrm_event_autogroup/show_rules'] = 
        array(
              'title' => t('List Association Rule(s)'),
              'access callback' => 'user_access',
              'access arguments' => array('access CiviCRM Event Autogroup'),
              'page arguments' => array('civicrm_event_autogroup_show_rules'),
              'weight' => -5,
              'type' => MENU_LOCAL_TASK,
              );       
    $items['admin/config/civicrm/civicrm_event_autogroup/add_rule'] = 
        array(
              'title' => t('Add Association Rule'),
              'page callback' => 'drupal_get_form',
              'page arguments' => array('civicrm_event_autogroup_add_rule_form'),
              'access arguments' => array('access CiviCRM Event Autogroup'),
              'type' => MENU_LOCAL_TASK,
              );
    $items['admin/config/civicrm/civicrm_event_autogroup/add_rule/%rule_id'] = 
        array(
              'title' => t('Add Association Rule'),
              'page callback' => 'drupal_get_form',
              'page arguments' => array('civicrm_event_autogroup_add_rule_form', 1),
              'access arguments' => array('access CiviCRM Event Autogroup'),
              'type' => MENU_LOCAL_TASK,
              );
   
   $items['admin/config/civicrm/civicrm_event_autogroup/manual_sync/%'] = array(
     'title' => 'Manual Synchronization',
     'description' => 'Moves contacts into Group based on Rule',
     'page callback' => 'civicrm_event_autogroup_manual_sync',
     'page arguments' => array(5),
     'access arguments' => array('access CiviCRM Event Autogroup'),
     'type' => MENU_NORMAL_ITEM,
    );
    
    $items['admin/config/civicrm/civicrm_event_autogroup/manual_sync/%/event/%'] = array(
     'title' => 'Manual Synchronization',
     'description' => 'Moves contacts into Group based on Rule',
     'page callback' => 'civicrm_event_autogroup_manual_sync',
     'page arguments' => array(5,7),
     'access arguments' => array('access CiviCRM Event Autogroup'),
     'type' => MENU_NORMAL_ITEM,
    );
    
    return $items;
}

function civicrm_event_autogroup_admin_settings(){
   //Begin add form
    $form = array();      
    
    //civicrm_participant_status_type
    
    $status_types = db_query('SELECT * FROM {civicrm_participant_status_type}')->fetchAll();
    
    $status_type_options = array();
    
    foreach ($status_types as $status_type) {
      
      $status_type_options[$status_type->id] = $status_type->name;

      
    }
    
    $form['civicrm_event_autogroup_status_types'] = array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#title' => 'Participant Statuses that Trigger Grouping',
      '#options' => $status_type_options,
      '#default_value' => variable_get('civicrm_event_autogroup_status_types', 0),
      '#description' => t('Participants in these statuses will be added to the group specified by the Rule.  If Update Status for Registered Participants is also checked, participants with any of these statuses will also be changed to the selected status.'),
    );
      
    $form['civicrm_event_autogroup_debug'] = array(
      '#type' => 'checkbox',
      '#title' => t('Run in Debug mode'),
      '#default_value' => variable_get('civicrm_event_autogroup_debug', 0),
      '#description' => t('This option will display the message telling you what a Rule would do, but won\'t actually change anything.'),
    );
    
    $form['civicrm_event_autogroup_cron'] = array(
      '#type' => 'checkbox',
      '#title' => t('Run on Cron'),
      '#default_value' => variable_get('civicrm_event_autogroup_cron', 0),
      '#description' => t('If the majority of contacts who sign up for an even actually attend, use this to process all the rules automatically each time cron is run.'),
    );
    
    $form['civicrm_event_autogroup_hours_after_event'] = array(
      '#type' => 'textfield',
      '#title' => t('Hours Event\'s Start to Autogroup'),
      '#size' => 11,
      '#maxlength' => 11,
      '#default_value' => variable_get('civicrm_event_autogroup_hours_after_event', '1'),
      '#description' => t('Allow time to deal with no shows and cancellations. Will only run if cron is enabled.'),
    );
    
    $form['civicrm_event_autogroup_days_since_event'] = array(
      '#type' => 'textfield',
      '#title' => t('Limit events to process to this many days ago'),
      '#size' => 11,
      '#maxlength' => 11,
      '#default_value' => variable_get('civicrm_event_autogroup_days_since_event', '1'),
      '#description' => t(''),
    );
    
    $form['civicrm_event_autogroup_registered_to_passed'] = array(
      '#type' => 'checkbox',
      '#title' => t('Update Status for Registered Participants'),
      '#default_value' => variable_get('civicrm_event_autogroup_registered_to_passed', 0),
      '#description' => t('This will change the status of any attendee left in the Registered status to Attended (Passed) when the Rule is processed.  Participants with any other status (No-show, Cancelled, Attended (Failed), etc) will remain in that status.'),
    );

    $form['civicrm_event_autogroup_change_status_types'] = array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#title' => 'Alter Status of Participant to',
      '#options' => $status_type_options,
      '#default_value' => variable_get('civicrm_event_autogroup_change_status_types', 0),
      '#description' => t('After event Participants with a status above will be changed to this status.'),
    );
                  
    return system_settings_form($form);
}

function civicrm_event_autogroup_manual_sync($rule_id, $event_id = NULL) {
  
  $count = 0;
  $output = '';

  
  //regardless of what we're doing we need the rule
  $rule = db_query('SELECT * FROM {civicrm_event_autogroup_rules} WHERE id = :id', array(':id' => $rule_id))->fetchObject();
   
  if ($event_id) {
    
    //$events = db_query('SELECT * FROM {civicrm_value_class_certifications_3} JOIN {civicrm_event} ON civicrm_event.id = entity_id WHERE civicrm_event.id = :event_id', array(':event_id' => $event_id))->fetchAll();
    
    $events = db_query('SELECT * FROM {civicrm_event} WHERE civicrm_event.id = :event_id', array(':event_id' => $event_id))->fetchAll();
    
    //dsm($events);
    
  } else {
    //get ALL the events for the time period
    $days = variable_get('civicrm_event_autogroup_days_since_event', '1');
    $process_date  = mktime(0, 0, 0, date("m")  , date("d")-$days, date("Y"));
    $date = date("Y-m-d", $process_date);
    
    $output .= 'processing rule ' . $rule_id . ' as if run on ' . $date . '<br />';
    
    $events = db_query('SELECT civicrm_event.id, civicrm_event.title, start_date FROM {civicrm_event} JOIN {civicrm_option_value} ON civicrm_option_value.value = civicrm_event.event_type_id WHERE civicrm_option_value.label = :type AND start_date >= :date AND civicrm_option_value.option_group_id = 14', array(':type' => $rule->event_type, ':date' => $date))->fetchAll();
  }
  
  foreach($events as $event) {

    $output .= 'found event <a href="/civicrm/event/search?reset=1&force=1&status=1&event=' . $event->id . '">' . $event->title . ' that started ' . $event->start_date . '</a>';
    if(!$event_id) {
      $output .= '[<a href="/admin/config/civicrm/civicrm_event_autogroup/manual_sync/' . $rule_id . '/event/' . $event->id . '">Sync Event</a>]';
    }
    $output .= '<br />';

    //get the users who attended that event
    $participants = db_query('SELECT * FROM {civicrm_participant} WHERE event_id = :event_id', array(':event_id' => $event->id))->fetchAll();
    
    foreach ($participants as $participant) {

      if (in_array($participant->status_id ,variable_get('civicrm_event_autogroup_status_types', 0))) {
        //@TODO add debug message for status
        $output .= 'will add contact <a href="/civicrm/contact/view?reset=1&cid=' . $participant->contact_id .'">' . $participant->contact_id .'</a> to group ' . $rule->group_id . ' because the status is ' . $participant->status_id . '<br />';
        $count++;
        
        if ($event_id) {
        
          // add the user to civicrm_group_contact
          // check to see if contact is already in group
          $group_status = db_query("SELECT status FROM {civicrm_group_contact} WHERE group_id = :group_id AND contact_id = :contact_id", array(':group_id' => $rule->group_id, ':contact_id' => $participant->contact_id))->fetchField();
          
          if ($group_status == 'Added'){
            $output .= 'already added <br />';
          } else {
            
            if (!$group_status){
              $id = db_insert('civicrm_group_contact')->fields(array(
              'group_id' => $rule->group_id,
              'contact_id' => $participant->contact_id,
              'status' => 'Added',
              ))->execute();
            
              $output .= '<b>added</b><br />';
            
            } else {
              // if status is anything else including REMOVED, leave the user as removed
              // contacts manually removed from a group have to be manually re-added
              $output .= 'did NOT add because the user had been in this group before.  Has a status of ' . $group_status . '<br />';
            } 
          } 
          
          // are we changing the status of the participant?
          if (variable_get('civicrm_event_autogroup_registered_to_passed', 0)) {
              
            $status_id = variable_get('civicrm_event_autogroup_change_status_types', 1);
            $participation_updated = db_update('civicrm_participant')
            ->fields(array(
              'status_id' => $status_id,
            ))
            ->condition('contact_id', $participant->contact_id, '=')
            ->condition('event_id', $event_id, '=')
            ->execute();
              
            $output .= '<b>changed the participation status of contact <a href="/civicrm/contact/view?reset=1&cid=' . $participant->contact_id .'">' . $participant->contact_id .'</a></b><br />';
          }
        }
        
      } else {
        $output .= 'will NOT add contact <a href="/civicrm/contact/view?reset=1&cid=' . $participant->contact_id .'">' . $participant->contact_id .'</a> to group ' . $rule->group_id . ' because the status is ' . $participant->status_id . '<br />';
      }
    }
  }
  
  if (variable_get('civicrm_event_autogroup_debug', 0)) {
    return '<pre>' . $output . '</pre>';
  } else {
    return 'Rule was processed.  ' . $count . ' contacts added to the specified group.';
  }
  
}

/**
 * Implementation of hook_permission().
 */
function civicrm_event_autogroup_permission() 
{
    return array(
                 'access CiviCRM Event Autogroup' => 
                 array( 'title' => t('Access CiviCRM Event Autogroup settings'), 
                        'description' => t('Access CiviCRM Event Autogroup settings and synchronization.'),
                        )
                 );
}

/**
 * Show stored association rules and delete rules.
 */
function civicrm_event_autogroup_show_rules($action = NULL, $id = NULL) 
{
    if ( ! civicrm_initialize( ) ) {
        return;
    } 
    if ($action == 'delete') {
        if (is_numeric($id)) {

            $delete = db_delete('civicrm_event_autogroup_rules')->condition('id', $id)->execute();
            if ($delete) {
                drupal_set_message(t('Rule ID !1 was successfully deleted.', array('!1' => $id)));
            } else {
                drupal_set_message(t('There was an error deleting the association rule. Please check your database settings and try again. If you continue to get this error message then try to reinstall CiviGroup Roles Sync.'), $type = 'error');
            }
        }
    }
    // get drupal roles
    $roles = user_roles(TRUE);
    
    // get civicrm groups
    $params = array('version'=>'2',);
    $groups =& civicrm_api('group', 'get', $params);

    //Begin building main output table.
    $header = array( 'rid' => t('Rule ID'), 'name' => t('Rule Name (\'CiviCRM Event Type\' <--> \'CiviCRM Group\')'), 'op' => t('Operation'));
    $data = array( );
    
    $rules = db_query('SELECT * FROM {civicrm_event_autogroup_rules} ORDER BY id ASC')->fetchAll( );
    
    foreach ( $rules as $result) {
        //dsm($result);
        $data[] = array(
                        'rid'  => check_plain($result->id), 
                        'name' => $result->event_type . " <--> " . check_plain($groups[$result->group_id]['title']),
                        'op'   => l(t('edit'), 'admin/config/civicrm/civicrm_event_autogroup/add_rule' . '/' . check_plain($result->id)) . '&nbsp;&nbsp;' . l(t('delete'), 'admin/config/civicrm/civicrm_event_autogroup/delete' . '/' . check_plain($result->id)) . '&nbsp;&nbsp;' . l(t('sync'), 'admin/config/civicrm/civicrm_event_autogroup/manual_sync' . '/' . check_plain($result->id)),
                        );
    }
    
    if (!empty($data)) {

        $output['data'] = array(
                                '#prefix' => t("Use the 'Add Association Rule' form to add new rules.").'<br/><br/>',
                                '#theme'  => 'table',
                                '#header' => $header,
                                '#rows'   => $data
                                );

    } else {
        $output = t('There are no rules currently set.') . ' ' . ts('Use the \'Add Association Rule\' form to add one.');
    }
    return $output;
}

/**
 * Implementation of hook_form(). Add/edit association rules.
 *
 * @ingroup forms
 * @see civimember_roles_add_rule_validate()
 * @see civicrm_event_autogroup_add_rule_submit()
 */
function civicrm_event_autogroup_add_rule_form($form, $form_state = array( ),  $edit_id = NULL) 
{
    if ( ! civicrm_initialize( ) ) {
        return;
    } 

    // retrieve drupal roles
    $roles = user_roles(TRUE);

    // get civicrm groups
    require_once "CRM/Core/PseudoConstant.php";
    $groups =& CRM_Core_PseudoConstant::group( );
    
    $classes = array();
    
    //Let's get rid of the authenticated role as it is a useless option for this module
    unset($roles[2]);
    
    //cA version
    //$result = db_query('SELECT DISTINCT(class_name_46) AS type FROM {civicrm_value_class_certifications_3}');
    
    
    //normally this will pull the event types
    // is this always option_group_id 14 or do we need to look that up?
    $result = db_query('SELECT label AS type FROM {civicrm_option_value} WHERE option_group_id = 14');
    
    // Result is returned as a iterable object that returns a stdClass object on each iteration
    foreach ($result as $record) {
      $classes[$record->type] = $record->type;
    }

    //dsm($classes);

    //Begin add form
    $form = array();      
    $form['add_rule'] = array(
                              '#type' => 'fieldset',
                              '#title' => t('Association Rule'),
                              '#description' => t('Choose a CiviCRM Class Name and a CiviCRM Group below.'),
                              '#tree' => TRUE,
                              '#parents' => array('add_rule'), 
                              ); 
    $form['add_rule']['select_type'] = array(
                                             '#type'     => 'select',
                                             '#title'    => t('Class Type'),
                                             '#options'  => $classes,
                                             '#required' => TRUE,
                                             );    
    $form['add_rule']['select_group'] = array(
                                              '#type'     => 'select',
                                              '#title'    => t('CiviCRM Group'),
                                              '#options'  => $groups,
                                              '#required' => TRUE,
                                              );    
      
    $form['submit'] = array(
                            '#type' => 'submit',
                            '#value' => t('Add association rule'),
                            );
    
    //Begin edit form
    if (!empty($edit_id) && is_numeric($edit_id)) {
        $default_values = db_select('civicrm_event_autogroup_rules', 'cgr')->fields('cgr')->condition('id', $edit_id)->execute( )->fetchObject( );
        //dsm($default_values);
        if (!$default_values) {
            drupal_set_message(t('There was an error in obtaining the association rule for edit. Please check your database settings and try again. If you continue to get this error message then try to reinstall CiviGroup Roles Sync.'));
            return $form;
        }
        
        
        //Alter above add form with default values.
        $form['add_rule']['select_group']['#default_value'] = check_plain($default_values->group_id);
        $form['add_rule']['select_type']['#default_value'] = check_plain($default_values->event_type);
        $form['edit_flag'] = array('#type' => 'hidden', '#value' => check_plain($edit_id));
        $form['submit']['#value'] = t('Edit association rule');
        
      //dsm($form);  
    }
    
    return $form;
}

/**
 * Implementation of hook_validate() for the add/edit rule form.
 */
function civicrm_event_autogroup_add_rule_form_validate($form, &$form_state) 
{
    //Make sure there is a CiviMember Membership Type and a Drupal Role selected.
    if (!$form_state['values']['add_rule']['select_type']) {
      form_set_error('add_rule', t('Please select CiviCRM Event Type.'));
    }
    
    if (!$form_state['values']['add_rule']['select_group']) {
      form_set_error('add_rule', t('Please select CiviCRM Group.'));
    }
    
    
    //Validate edit flag if set
    if (isset($form_state['values']['edit_flag']) && !is_numeric($form_state['values']['edit_flag'])) {
        for_set_error('', t('Edit flag was not numeric.'));
    }
}

/**
 * Implementation of hook_submit() for the add/edit rule form.
 */
function civicrm_event_autogroup_add_rule_form_submit($form, &$form_state) 
{
    if ( ! civicrm_initialize( ) ) {
        return;
    } 
    //If edit_flag is set then process as an edit form, if not then process as an add form.
    if (isset($form_state['values']['edit_flag'])) {

        $edit_rule = db_update('civicrm_event_autogroup_rules')
            ->fields( array(
                            'event_type'  => (string) $form_state['values']['add_rule']['select_type'],
                            'group_id' => (int) $form_state['values']['add_rule']['select_group']
                            ) )
            ->condition( 'id', (int)$form_state['values']['edit_flag'] )
            ->execute();

        if ($edit_rule) {
            drupal_set_message(t('Your association rule has been edited.'));
        } 
    } else {
        
        $add_rule = db_insert('civicrm_event_autogroup_rules')
            ->fields(array(
                           'event_type'  => (string)  $form_state['values']['add_rule']['select_type'],
                           'group_id' => (int)$form_state['values']['add_rule']['select_group']
                           ) )
            ->execute();
        
        if ($add_rule) {
            drupal_set_message(t('Your association rule has been added.'));
        }
    }
}

/**
 * Helper function to add and remove users from groups, use after user_save to remove roles $roles = $edit['roles'] for user_save
 * @roles list of role to add/remove
 * @user Drupal user object
 * $op either add or remove
 */

function civicrm_event_autogroup_add_remove_groups( $roles, $user, $op ) 
{
    if ( $op == 'add' ) {
        $txt = 'added';
    } elseif ( $op == 'remove' ) {
        $txt = 'removed';
    } else {
        return;
    }
    $debug_mode = FALSE;

    if ( $roles ) { // make sure user has other roles other than authenticated
        
        //find the contact record
        $params = array('version'=>'2', 'email' => $user->mail );
        $contact =& civicrm_api('contact', 'get', $params);
        $contact = array_pop( $contact );
        
        $contact_id = $contact['contact_id'];
        
        if ( !empty( $contact ) && isset( $contact['contact_id'] ) ) {
            
            //loop over user's roles
            foreach ( $roles as $rid => $role ) {
 
                //find the group(s) for the role
                $groupIds = db_select('civicrm_event_autogroup_rules', 'cgr' )->fields( 'cgr', array('group_id') )->condition('role_id', $rid)->execute( )->fetchAll( );
                foreach ( $groupIds as $groupId ) {   
                    
                    //add the contact
                    $contacts = array( $contact );
                    $gparams = array( 'version'=>'2','group_id' => $gid, 'contact_id' => $contact_id );
                    if ( $op == 'add' ) {
                        $result = civicrm_api('group_contact', 'add', $gparams);
                    } else {
                        $result = civicrm_api('group_contact', 'remove', $gparams);
                    }
                    
                    if ( $result['is_error'] > 0 ) {
                        $msg = 'Error: Unable to sync role @role';
                        $variables = array( '@role' => $role );
                        watchdog( 'civicrm_event_autogroup', $msg, $variables );
                        if ( $debug_mode ) drupal_set_message( t( 'Error: Unable to sync role %role', array( '%role' => $role ) ) );
                    } elseif ( $debug_mode && $result['added'] > 0 ) {
                        drupal_set_message( "$txt user $user->name Group: $role" );
                        drupal_set_message( var_export( $result, TRUE ) );
                    } elseif ( $debug_mode ) {
                        drupal_set_message( "User $user->name NOT $txt Group: $role" );
                        drupal_set_message( var_export( $result, TRUE ) );
                    }
                } //end while
            } //end foreach
                
        } else {
            $msg = 'CiviCRM contact not found for @mail';
            $variables = array( '@mail' => $user->mail );
            watchdog( 'civicrm',  $msg, $variables );
            if ( $debug_mode ) drupal_set_message( t( 'CiviCRM contact not found for %mail', array( '%mail' => $user->mail ) ) );
        } //end if $contact
    } //endif $roles
}
