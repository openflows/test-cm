<?php

/**
 * @file
 * Install, update and uninstall functions for the Media: Cloudcast module.
 */

/**
 * Implement hook_install().
 */
function media_cloudcast_install() {
  
  //take over the management of all media_pegtv files
  $files = db_query("SELECT fid, uri FROM {file_managed} WHERE filemime  = 'video/pegtv'");
  
  foreach($files as $file) {
	  
	$new_uri = str_replace("pegtv://", "cloudcast://", $file->uri);
	
	db_update('file_managed') // Table name no longer needs {}
    ->fields(array(
    'uri' => $new_uri,
    'filemime' => 'video/cloudcast',
    ))
    ->condition('fid', $file->fid, '=')
    ->execute();
  }
  
  return array();
}

/**
 * Implement hook_uninstall().
 */
function media_cloudcast_uninstall() {
  drupal_load('module', 'media_cloudcast');

  foreach (media_cloudcast_variable_default() as $variable => $value) {
    media_cloudcast_variable_del($variable);
  }
  return array(array('success' => TRUE, 'query' => "Deleted all variables in the Media: Cloudcast namespace."));
}

/**
 * Add new browser for media.
 */
function media_cloudcast_update_7200() {
  return array();
}

/**
 * Clean up file display formatters and migrate settings.
 */
function media_cloudcast_update_7201() {
  // Required to run file_displays_load() in update.php.
  module_load_include('inc', 'file_entity', 'file_entity.file_api');

  // Get view modes.
  $video_view_modes = field_view_mode_settings('file', "video");
  $video_view_modes['default'] = array('custom_settings' => TRUE);
  foreach ($video_view_modes as $view_mode => $custom_settings) {

    $formatters = file_displays_load('video', $view_mode);
    $formatter = 'video__' . $view_mode . '__media_cloudcast_video';

    if (isset($formatters[$formatter])) {

      // Migrate chromeless=1 or controls='0' to autohide=1, showinfo=0.
      if (isset($formatters[$formatter]->settings['chromeless'])) {
        if ($formatters[$formatter]->settings['chromeless'] == 1) {
          $formatters[$formatter]->settings['autohide'] = 1;
          $formatters[$formatter]->settings['showinfo'] = 0;
        }
      }
      if (isset($formatters[$formatter]->settings['controls'])) {
        if ($formatters[$formatter]->settings['controls'] == 0) {
          $formatters[$formatter]->settings['autohide'] = 1;
          $formatters[$formatter]->settings['showinfo'] = 0;
        }
      }

      // Remove deprecated settings from the exportable array.
      foreach (array('version', 'fullscreen', 'hd', 'showsearch', 'controls', 'chromeless') as $deprecated) {
        if (isset($formatters[$formatter]->settings[$deprecated])) {
          unset($formatters[$formatter]->settings[$deprecated]);
        }
      }

      // Save the ctools objects
      $display = $formatters[$formatter];
      file_display_save((object) $display);
    }
  }
  return array();
}

/**
* Update Media Cloudcast files to the new video file_entity type.
*/
function media_cloudcast_update_7202() {
  // Required to run file_displays_load() in update.php.
  module_load_include('inc', 'file_entity', 'file_entity.file_api'); 
  $video_type = file_type_load('video');
  $video_type->mimetypes[] = 'video/cloudcast';
  // maybe also add stream if is not there already?
  file_type_save($video_type);

  // Update existing files
  db_query("UPDATE {file_managed} SET type = 'video' WHERE type = 'undefined' AND filemime = 'video/cloudcast'");
}