<?php
/**
 *@file
 * Dispays warnings of users missing prerequisites
 */

/**
 * Implements hook_init().
 */
function civicrm_prereq_check_init() {
  drupal_add_css(drupal_get_path('module', 'civicrm_prereq_check') . '/css/civicrm_prereq_check.css');
}

/**
 * Implements hook_permission().
 */
function civicrm_prereq_check_permission() {
  return array(
    'access civicrm prereq check' => array(
      'title' => t('Access CiviCRM Prereq Check'),
      'description' => '',
    ),
  );
}


/**
 * Implementation of hook_menu().
 */
function civicrm_prereq_check_menu() {
  $items = array();

  $items['admin/config/civicrm/civicrm-prereq-check'] = array(
    'title' => 'CiviCRM Prerequisites Check',
    'description' => 'Define which custom fields that define the different types of prerequisites.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('civicrm_prereq_check_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['civicrm-prereq-check/error'] = array(
    'title' => 'CiviCRM Prerequisites Check Error',
    'description' => 'Define which custom fields that define the different types of prerequisites.',
    'page callback' => 'civicrm_prereq_check_error',
    'page arguments' => array(2,3),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_ACTION,
  );
  
  return $items;
}

/**
 * Builds the civicrm_prereq_check_ admininstration settings form.
 */
function civicrm_prereq_check_admin_settings($form, &$form_state) {
  $form = array();

  //get a list of custom form fields from CiviCRM  - this list comes from the field group name which is not changed by renamming a field group in CiviCRM.
  $group_id = db_query('SELECT id FROM {civicrm_custom_group} WHERE name = :name', array(':name' => 'Event_Prerequisites'))->fetchField();
  
  //dsm($group_id);
  
  $fields = db_query('SELECT id, label FROM {civicrm_custom_field} WHERE is_active = 1 AND custom_group_id = :gid', array(':gid' => $group_id))->fetchAllKeyed();
  //dsm($fields);
  
  $fields[''] = ' - '. t('None') . ' - ';
  
  $header = 'This module requires some custom configuration work in CiviCRM.  Please follow the instructions for creating the prerequisite field and options.';
    
  $form['civicrm_prereq_check_header'] = array(
    '#markup' => $header,
  );
  
  $form['civicrm_prereq_check_event'] = array(
    '#type' => 'fieldset',
    '#title' => t('Event Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['civicrm_prereq_check_event']['civicrm_prereq_check_event_warning'] = array(
    '#type' => 'checkbox',
    '#title' => t('Warning Only'),
    '#default_value' => variable_get('civicrm_prereq_check_event_warning', 0),
    '#description' => t('When this is checked, users will see a warning but be allowed to complete the form'),
  );
  
  $form['civicrm_prereq_check_event']['civicrm_prereq_check_event_error'] = array(
    '#type' => 'textarea',
    '#title' => t('Universal Event Denied Message or Warning'),
    '#rows' => 10,
    '#cols' => 5,
    '#default_value' => variable_get('civicrm_prereq_check_event_error', t('You do not have the required prerequisites to sign up for this event.')),
    '#description' => t(''),
  );
  
  $form['civicrm_prereq_check_event']['civicrm_prereq_check_event_denied_message'] = array(
    '#type' => 'select',
    '#options' => $fields,
    '#title' => t('Event Specific Message'),
    '#default_value' => variable_get('civicrm_prereq_check_event_denied_message', NULL),
    '#description' => t('Select the text field. This message overrides the universal message when defined and populated.'),
  );
  
  $form['civicrm_prereq_check_event']['civicrm_prereq_check_required_event_type_for_event'] = array(
    '#type' => 'select',
    '#options' => $fields,
    '#title' => t('Prerequisite Event Types (require all)'),
    '#default_value' => variable_get('civicrm_prereq_check_required_event_type_for_event', NULL),
    '#description' => t('A user must have at least registered for one Event of each of the types selected.  Select None to skip this check.'),
  );
  
  $form['civicrm_prereq_check_event']['civicrm_prereq_check_interchangable_event_type_for_event'] = array(
    '#type' => 'select',
    '#options' => $fields,
    '#title' => t('Prerequisite Event Types (require at least one)'),
    '#default_value' => variable_get('civicrm_prereq_check_interchangable_event_type_for_event', NULL),
    '#description' => t('A user must have at least registered for one Event of any of the types selected.  Select None to skip this check.'),
  );
  
  $form['civicrm_prereq_check_event']['civicrm_prereq_check_required_role_for_event'] = array(
    '#type' => 'select',
    '#options' => $fields,
    '#title' => t('Prerequisite Roles (require all)'),
    '#default_value' => variable_get('civicrm_prereq_check_required_role_for_event', NULL),
    '#description' => t('A user must be a member of ALL of the Roles selected.  Select None to skip this check.'),
  );
  
  $form['civicrm_prereq_check_event']['civicrm_prereq_check_interchangable_role_for_event'] = array(
    '#type' => 'select',
    '#options' => $fields,
    '#title' => t('Prerequisite Roles (require at least one)'),
    '#default_value' => variable_get('civicrm_prereq_check_interchangable_role_for_event', NULL),
    '#description' => t('A user must be a member of at least one of the Roles selected.  Select None to skip this check.'),
  );

/*

    //get a list of custom form fields from CiviCRM
  $group_id = db_query('SELECT id FROM {civicrm_custom_group} WHERE name = :name', array(':name' => 'Contribution_Prerequisites'))->fetchField();
  
  //dsm($group_id);
  
  $fields = db_query('SELECT id, label FROM {civicrm_custom_field} WHERE is_active = 1 AND custom_group_id = :gid', array(':gid' => $group_id))->fetchAllKeyed();
  //dsm($fields);
  
  $fields[''] = ' - '. t('None') . ' - ';
  
  $form['civicrm_prereq_check_contrib'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contribution Prerequisets'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  
  $form['civicrm_prereq_check_contrib']['civicrm_prereq_check_contrib_warning'] = array(
    '#type' => 'checkbox',
    '#title' => t('Warning Only'),
    '#default_value' => variable_get('civicrm_prereq_check_contrib_warning', 0),
    '#description' => t('When this is checked, users will see a warning but be allowed to complete the Contribution form'),
  );
  
  $form['civicrm_prereq_check_contrib']['civicrm_prereq_check_contrib_error'] = array(
    '#type' => 'textarea',
    '#title' => t('Universal Contribution Denied Message or Warning'),
    '#rows' => 10,
    '#cols' => 5,
    '#default_value' => variable_get('civicrm_prereq_check_contrib_error', t('You do not have the required prerequisites to access this form.')),
    '#description' => t(''),
  );
  
  $form['civicrm_prereq_check_contrib']['civicrm_prereq_check_contrib_denied_message'] = array(
    '#type' => 'select',
    '#options' => $fields,
    '#title' => t('Contribution Specific Message'),
    '#default_value' => variable_get('civicrm_prereq_check_contrib_denied_message', NULL),
    '#description' => t('Select the text field. This message overrides the universal message when defined and populated.'),
  );
  
  $form['civicrm_prereq_check_contrib']['civicrm_prereq_check_required_type_for_contrib'] = array(
    '#type' => 'select',
    '#options' => $fields,
    '#title' => t('Prerequisite Contribution Types (require all)'),
    '#default_value' => variable_get('civicrm_prereq_check_required_type_for_contrib', NULL),
    '#description' => t('A user must have at least registered for one Event of each of the types selected.  Select None to skip this check.'),
  );
  
  $form['civicrm_prereq_check_contrib']['civicrm_prereq_check_interchangable_type_for_contrib'] = array(
    '#type' => 'select',
    '#options' => $fields,
    '#title' => t('Prerequisite Contribution Types (require at least one)'),
    '#default_value' => variable_get('civicrm_prereq_check_interchangable_type_for_contrib', NULL),
    '#description' => t('A user must have at least registered for one Event of any of the types selected.  Select None to skip this check.'),
  );
  
  $form['civicrm_prereq_check_contrib']['civicrm_prereq_check_required_role_for_contrib'] = array(
    '#type' => 'select',
    '#options' => $fields,
    '#title' => t('Prerequisite Roles (require all)'),
    '#default_value' => variable_get('civicrm_prereq_check_required_role_for_contrib', NULL),
    '#description' => t('A user must be a member of ALL of the Roles selected.  Select None to skip this check.'),
  );
  
  $form['civicrm_prereq_check_contrib']['civicrm_prereq_check_interchangable_role_for_contrib'] = array(
    '#type' => 'select',
    '#options' => $fields,
    '#title' => t('Prerequisite Roles (require at least one)'),
    '#default_value' => variable_get('civicrm_prereq_check_interchangable_role_for_contrib', NULL),
    '#description' => t('A user must be a member of at least one of the Roles selected.  Select None to skip this check.'),
  );
  
*/
  return system_settings_form($form);
}


/**
 *
 * Implementation of hook_node_view()
 *
 * GinkgoFJG: My first read of this code suggests the purpose of this function
 * is to alert appropriately permissioned folks (users with the 'access civicrm
 * prereq check' permission, probably admins) about participants that have
 * already signed up for an event but who don't meet the prerequisites. It does
 * not appear to be involved in granting/denying access to sign up.
 */
function civicrm_prereq_check_node_view($node, $view_mode, $langcode) { 
  if ($node->type == 'civicrm_multiday_event' && $view_mode == 'full' && user_access('access civicrm prereq check')) {
    
    //get the prereqs for this class
    $event_id = $node->field_civievent_id[LANGUAGE_NONE][0]['value'];
    
    //http://api.civicrm.org/v3/CiviCRM_APIv3/API_Event/_api---v3---Event.php.html  
    /*
    DOES NOT WORK HERE BECAUSE API IS UNAWARE OF CUSTOM FIELDS
    if (civicrm_initialize()) {
      require_once 'api/v3/Event.php';
      $params = array();
      $params['id'] = $event_id;
      $params['version'] = TRUE;
      //$event = civicrm_api3_event_get($params);
      $event = civicrm_api('event', 'get', $params);
    }
    
    */
    
    //$prereqs = db_query('SELECT * FROM {civicrm_value_prerequisites_5} WHERE entity_id = :event_id', array(':event_id' => $event_id))->fetchAssoc();
      
    //dsm($prereqs);
    
   if (civicrm_initialize()) {
      require_once 'api/v3/Event.php';
      
      $participants = civicrm_api("Participant", "get", array ('version' =>'3', 'event_id' => $event_id));
      
      $participant_req_array = array();
      
      if (variable_get('civicrm_prereq_check_required_event_type', NULL)) {
      // check the required prereqs
      $table = 'return.custom_' . variable_get('civicrm_prereq_check_required_event_type', NULL);     
      $params = array('entity_id' => $event_id, 'version' => 3, 'sequential' => 1, $table => 1);
      $prereqs = civicrm_api('CustomValue', 'get', $params);
      
      foreach ($prereqs['values'] AS $prereq) {
        foreach($prereq[0] AS $class_id) {
          $req_class_name = db_query('SELECT name FROM {civicrm_option_value} WHERE value = :id', array(':id' => $class_id))->fetchField();
          
          //dsm('This class requires ' . $req_class_name);
          
          //check to see that everyone in this class has this prereq
          foreach($participants['values'] AS $participant) {
            
            $classes = civicrm_api("Participant","get", array ('version' =>'3', 'contact_id' => $participant['contact_id']));
            
            //set it to false
            $participant_req_array[$participant['contact_id']][$req_class_name] = FALSE;
            $participant_req_array[$participant['contact_id']]['name'] = $participant['display_name'];
            
            foreach($classes['values'] AS $class) {
              //dsm($participant['contact_id'] . ' has taken ' . $class['event_type']);
              if($req_class_name == $class['event_type']) {
                $participant_req_array[$participant['contact_id']][$req_class_name] = TRUE;
              }
            }
          }     
        }
      } 
    }  
    }
    
    //dsm($participant_req_array);
    
    

      // check the interchangable prereqs 
      $table = 'return.custom_' . variable_get('civicrm_prereq_check_interchangable_event_type', NULL);   
      $params = array('entity_id' => $event_id, 'version' => 3, 'sequential' => 1, $table => 1);
      $prereqs = civicrm_api('CustomValue', 'get', $params);
      
      
            
      foreach ($prereqs['values'] AS $prereq) {
        foreach($prereq[0] AS $class_id) {
          $req_class_name = db_query('SELECT name FROM {civicrm_option_value} WHERE value = :id', array(':id' => $class_id))->fetchField();
          
          //dsm('This class requires ' . $req_class_name);
          
          //check to see that everyone in this class has this prereq
          foreach($participants['values'] AS $participant) {
            
            //set it to false
            $participant_req_array[$participant['contact_id']]['Any of the Interchangeable Requirements'] = FALSE;
            $participant_req_array[$participant['contact_id']]['name'] = $participant['display_name'];
            
            $classes = civicrm_api("Participant","get", array ('version' =>'3', 'contact_id' => $participant['contact_id']));
            
            foreach($classes['values'] AS $class) {
              //dsm($participant['contact_id'] . ' has taken ' . $class['event_type']);
              if($req_class_name == $class['event_type']) {
                $participant_req_array[$participant['contact_id']]['Any of the Interchangeable Requirements'] = TRUE;
              }
            }
          }     
        }
      } 
     
    
    foreach($participant_req_array AS $key => $checks) {
      foreach($checks AS $class_name => $value) {
        if(!$value) {
          drupal_set_message($participant_req_array[$key]['name'] . ' has not taken ' . $class_name, 'warning');
        }    
      }
    } 

        
    
  }
}


/**
 * Implementation of hook_civicrm_buildForm().
 *
 * Redirects user attempting to register for an event if s/he hasn't met the
 * prerequisites for the event. Prerequisites are ANDed. If more than one
 * prequisite (or type of prerequisite -- e.g., event, role) is specified for an
 * event, all must be met; otherwise the user is redirected to an error page.
 *
 * @global object $user
 * @param type $formName
 * @param type $form
 */
function civicrm_prereq_check_civicrm_buildForm($formName, &$form) {
  //dsm($formName);
/*
  
  if ($formName == 'CRM_Contribute_Form_Contribution_Main') {
    global $user;
    $allow = FALSE;
    
    dsm($form->_id);
    
    //get the roles... they aren't in the form
    if (!civicrm_initialize()) {
      drupal_set_message(t('Failed to initialize CiviCRM'));
      return;
    }
  
    $params = array();
   
    $params['version'] = 3;
    $params['sequential'] = 1;
    $params['id'] = $form->_id;
   
    $result = civicrm_api("Contribution", "get", $params);
    
    dsm($result);
    
    //custom_8
    
    //CHECK REQUIRED ROLES
    if (in_array('Members', array_values($user->roles))) { 
      $allow = TRUE;
    }
    
    if (!$allow) {
      
    
      if (variable_get('civicrm_prereq_check_contrib_warning', 0)) {
        drupal_set_message(variable_get('civicrm_prereq_check_contrib_error', t('You do not have the required prerequisites to access this form.')), 'warning');
        } else {
        
        drupal_goto('civicrm-prereq-check/error/contrib/' . $form->_id);
        
      }
    }
  }
  
*/
  if ($formName == 'CRM_Event_Form_Registration_Register') {
    //get the roles... they aren't in the form
    if (!civicrm_initialize()) {
      drupal_set_message(t('Failed to initialize CiviCRM'));
      return;
    }
    
    $params = array();
   
    $params['version'] = 3;
    $params['sequential'] = 1;
    $params['id'] = $form->_eventId;
   
    $event = civicrm_api("Event", "get", $params);
    
    
    //CHECK REQUIRED ROLES
    $role_criteria_met = _civicrm_prereq_check_check_role_reqs($event);
          
    // CHECK REQUIRED CLASSES
    $event_criteria_met = _civicrm_prereq_check_check_event_reqs($event);
      
    if (!$event_criteria_met || !$role_criteria_met) {
    
      if (variable_get('civicrm_prereq_check_event_warning', 0)) {

        if (variable_get('civicrm_prereq_check_event_denied_message', NULL)) {
          $access_denied_message_field = 'custom_' . variable_get('civicrm_prereq_check_event_denied_message', NULL);
          drupal_set_message($event['values'][0][$access_denied_message_field], 'warning');
        
        } else {
        
          drupal_set_message(variable_get('civicrm_prereq_check_event_error', t('You do not have the required prerequisites to sign up for this event.')), 'warning');
          
        }
      
      } else {
        drupal_goto('civicrm-prereq-check/error/event/' . $form->_eventId);
      }
    }
  }
}

function civicrm_prereq_check_error($formtype, $id = NULL) {
  
  if($formtype == 'event') {
    if ($id) {
      
      if (!civicrm_initialize()) {
        drupal_set_message(t('Failed to initialize CiviCRM'));
        return;
      }
    
      $params = array();
   
      $params['version'] = 3;
      $params['sequential'] = 1;
      $params['id'] = $id;
   
      $event = civicrm_api("Event", "get", $params);
      
      if (variable_get('civicrm_prereq_check_event_denied_message', NULL)) {
        $access_denied_message_field = 'custom_' . variable_get('civicrm_prereq_check_event_denied_message', NULL);
        drupal_set_message($event['values'][0][$access_denied_message_field], 'warning');
        return;
      }
      
    } 
        
    drupal_set_message(variable_get('civicrm_prereq_check_event_error', t('You do not have the required prerequisites to sign up for this event.')), 'warning');
        
  }
 /*
 
  if($formtype == 'contrib') {
    if ($id) {
      if (!civicrm_initialize()) {
        drupal_set_message(t('Failed to initialize CiviCRM'));
        return;
      }
    
      $params = array();
   
      $params['version'] = 3;
      $params['sequential'] = 1;
      $params['id'] = $id;
   
      $contrib = civicrm_api("Contribution", "get", $params);

      $access_denied_message_field = 'custom_' . variable_get('civicrm_prereq_check_contrib_denied_message', NULL);
      
      drupal_set_message($contrib['values'][0][$access_denied_message_field], 'warning');
    
    } else {
    
      drupal_set_message(variable_get('civicrm_prereq_check_event_error', t('You do not have the required prerequisites to sign up for this event.')), 'warning');
    }
  }
  
*/
  return '';
}

/**
 * Determines whether or not the logged in user has met the event prerequisites
 * for the given event.
 *
 * @global object $user Drupal user object
 * @param array $event Result of a CiviCRM API Event.get. @TODO: accept an
 *        integer as well and do the event lookup ourselves if param is an int
 * @return boolean True if all events prequisites are met. In cases where both
 *         "require all" and "require at least one" prerequisites are specified,
 *         the prereqs are ANDed; that is, a contact must have all the prereqs
 *         from the "all" list and at least one from the "any" list
 */
function _civicrm_prereq_check_check_event_reqs($event) {
  global $user;
  $result = TRUE;
  $civi_custom_field_id_int = variable_get('civicrm_prereq_check_interchangable_event_type_for_event', NULL);
  $civi_custom_field_id_all = variable_get('civicrm_prereq_check_required_event_type_for_event', NULL);

  if ($civi_custom_field_id_int || $civi_custom_field_id_all) {
    $required_event_types = array(
      'interchangeable' => array(),
      'all' => array(),
    );
    if (isset($civi_custom_field_id_int) && array_key_exists("custom_{$civi_custom_field_id_int}", $event['values'][0])) {
      $required_event_types['interchangeable'] = array_fill_keys($event['values'][0]["custom_{$civi_custom_field_id_int}"], 0);
    }
    if ($civi_custom_field_id_all && array_key_exists("custom_{$civi_custom_field_id_all}", $event['values'][0])) {
      $required_event_types['all'] = array_fill_keys($event['values'][0]["custom_{$civi_custom_field_id_all}"], 0);
    }

    /*
     * Example var_dump($required_event_types)
     *
     * array (size=2)
     *   'interchangeable' =>
     *     array (size=2)
     *       // key is event type id; value is a boolean (1 if requirement met, else 0)
     *       18 => int 0
     *       20 => int 0
     *   'all' => null
     */

    // get CiviCRM contact ID for the logged in user
    $api = civicrm_api('UFMatch', 'getsingle', array(
      'uf_id' => $user->uid,
      'version' => 3,
    ));
    $cid = $api['contact_id'];

    // get event participation records for logged in user
    $attended_events = array();
    $api = civicrm_api('Participant', 'get', array(
      'contact_id' => $cid,
      'return' => array('event_id'),
      'version' => 3,
    ));
    if (!$api['is_error']) {
      foreach ($api['values'] as $v) {
        $attended_events[] = $v['event_id'];
      }
    }

    // get event types for attended events
    $api = civicrm_api('Event', 'get', array(
      'id' => array('IN' => $attended_events),
      'return' => array('event_type_id'),
      'version' => 3,
    ));
    if (!$api['is_error']) {
      foreach ($api['values'] as $e) {
        $event_type_id = (int) $e['event_type_id'];
        foreach ($required_event_types as $req => $types) {
          if (array_key_exists($event_type_id, $required_event_types[$req])) {
            $required_event_types[$req][$event_type_id] = 1;
          }
        }
      }
    }

    $int_criteria_met = TRUE;
    if (
      count($required_event_types['interchangeable']) &&
      array_search(1, $required_event_types['interchangeable'], TRUE) === FALSE
    ) {
      $int_criteria_met = FALSE;
    }

    $all_criteria_met = TRUE;
    if (
      count($required_event_types['all']) &&
      array_search(0, $required_event_types['all'], TRUE) !== FALSE
    ) {
      $all_criteria_met = FALSE;
    }

    $result = ($all_criteria_met && $int_criteria_met);
  }

  return $result;
}

/**
 * Determines whether or not the logged in user has met the role prerequisites
 * for the given event.
 *
 * @global object $user Drupal user object
 * @param array $event Result of a CiviCRM API Event.get. @TODO: accept an
 *        integer as well and do the event lookup ourselves if param is an int
 * @return boolean True if all role prequisites are met. In cases where both
 *         "require all" and "require at least one" prerequisites are specified,
 *         the prereqs are ANDed; that is, a contact must have all the prereqs
 *         from the "all" list and at least one from the "any" list
 */
function _civicrm_prereq_check_check_role_reqs($event) {
  global $user;
  $result = TRUE;
  $civi_custom_field_id_int = variable_get('civicrm_prereq_check_interchangable_role_for_event', NULL);
  $civi_custom_field_id_all = variable_get('civicrm_prereq_check_required_role_for_event', NULL);

  if ($civi_custom_field_id_int || $civi_custom_field_id_all) {
    $required_roles = array(
      'interchangeable' => array(),
      'all' => array(),
    );
    if (isset($civi_custom_field_id_int) && array_key_exists("custom_{$civi_custom_field_id_int}", $event['values'][0])) {
      $required_roles['interchangeable'] = array_fill_keys($event['values'][0]["custom_{$civi_custom_field_id_int}"], 0);
    }
    if ($civi_custom_field_id_all && array_key_exists("custom_{$civi_custom_field_id_all}", $event['values'][0])) {
      $required_roles['all'] = array_fill_keys($event['values'][0]["custom_{$civi_custom_field_id_all}"], 0);
    }

    /*
     * Example var_dump($required_roles)
     *
     * array (size=2)
     *   'interchangeable' =>
     *     array (size=2)
     *       // key is role id; value is a boolean (1 if requirement met, else 0)
     *       18 => int 0
     *       20 => int 0
     *   'all' => null
     */

    foreach ($user->roles as $rid => $name) {
      foreach ($required_roles as $req => $roles) {
        if (array_key_exists($rid, $required_roles[$req])) {
          $required_roles[$req][$rid] = 1;
        }
      }
    }

    $int_criteria_met = TRUE;
    if (
      count($required_roles['interchangeable']) &&
      array_search(1, $required_roles['interchangeable'], TRUE) === FALSE
    ) {
      $int_criteria_met = FALSE;
    }

    $all_criteria_met = TRUE;
    if (
      count($required_roles['all']) &&
      array_search(0, $required_roles['all'], TRUE) !== FALSE
    ) {
      $all_criteria_met = FALSE;
    }

    $result = ($all_criteria_met && $int_criteria_met);
  }

  return $result;
}